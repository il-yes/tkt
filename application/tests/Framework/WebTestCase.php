<?php

namespace Tests\Framework;



use Throwable;
use Doctrine\ORM\Tools\SchemaTool;
use PHPUnit\Framework\TestCase;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase as BaseTestCase;

class WebTestCase extends BaseTestCase
{
    protected $client;

    protected static $container;

    protected $schemaTool;

    protected $entityManager;

    protected $crawler;

    protected $response;

    protected $responseContent;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client = static::createClient();
        $kernel = static::bootKernel();
        // Lets get the entityManager from the container
        $this->entityManager = $kernel->getContainer()->get('doctrine')->getManager();

        $this->entityManager->beginTransaction();
        $this->entityManager->getConnection()->setAutoCommit(false);

    }

    protected function visit($url)
    {
        $this->crawler = $this->client->request('GET', $url);

        $this->response = $this->client->getResponse();
        $this->responseContent = $this->response->getContent();
        return $this;
    }


    protected function seeText($text)
    {
        $this->assertStringContainsString($text, $this->responseContent);
        return $this;
    }

    protected function assertResponseOk()
    {
        $this->assertEquals(200, $this->response->getStatusCode());
        return $this;
    }


    protected function onNotSuccessfulTest(Throwable $t): void
    {
        if ($this->crawler && $this->crawler->filter('.exception-message')->count() > 0)
        {
            $throwableClass = get_class($t);

            $message =  $this->crawler->filter('.exception-message')->eq(0)->text();

            throw new $throwableClass($t->getMessage() .' | '. $message);
        }
        throw $t;

    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        if($this->entityManager != null)
        {
            $this->entityManager->rollBack();
        }
    }

    public function truncateEntities(array $entities)
    {
        $connection = $this->entityManager->getConnection();
        $databasePlatform = $connection->getDatabasePlatform();
        if ($databasePlatform->supportsForeignKeyConstraints()) {
            $connection->query('SET FOREIGN_KEY_CHECKS=0');
        }
        foreach ($entities as $entity) {
            $query = $databasePlatform->getTruncateTableSQL(
                $this->entityManager->getClassMetadata($entity)->getTableName()
            );
            $connection->executeUpdate($query);
        }
        if ($databasePlatform->supportsForeignKeyConstraints()) {
            $connection->query('SET FOREIGN_KEY_CHECKS=1');
        }
    }

    // ----------------------------- ManagerApplication --------------------------
    public function dataMigration($entities)
    {
        foreach ($entities as $entity)
        {
            $this->saveEntity($entity);
        }
    }

    public function saveEntity($entity)
    {

        $this->entityManager->persist($entity);
        $this->entityManager->flush();
    }

}
